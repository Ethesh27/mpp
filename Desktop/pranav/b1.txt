Progm-1

git init
git remote rm origin
git remote add origin https://github.com/abc/demo.git

git config --global user.name " "
git config --global user.email " "

cd 
cd desktop
cd demo

git add .
git commit -m "first commit"
git push origin master

git status
git log

git clone repo-link
git reset

-------------------------

Progm-2

git init
git remote rm origin
git remote add origin https://github.com/abc/demo.git

git config --global user.name " "
git config --global user.email " "

cd 
cd desktop
cd demo

git checkout -b branch1
nano file1.txt
git add .
git commit -m "b1"

git switch master

git checkout -b branch2
nano file1.txt
git add .
git commit -m "b2"

git switch master

git merge branch1
git merge branch2

git diff branch1
git diff branch2

Add new file and 
git push origin branch1
git push origin branch2


-----------------------------

Prog-3

1) Download and install JDK
2) Set "Environment variable"
	- Go to Environment variable, under "System variable" select PATH
	  and add path of jdk "C:\Program Files\Java\jdk-17"
3) Download and install Jenkins
4) Run Jenkins on "localhost8080"
5) Create a folder on desktop which contains python file "first.py"
6) upload the file to github repository
7) Launch the Jenkins and configure the pipeline
	- click +new item and give a name to it
	- click "Freestyle project"
8) Under "Source Code Management" give git-repo link
9) Under "Build Trigger", select "Poll SCM" and put 5-star with space
10) ??? In "Build Steps" choose "Execute Windows batch command" and add python prgm1.py  ???
11) Apply and save
12) Click on "Build Now" and click on "Consol Output" and verify


--------------------------------------------------------------------------------------------------------------------

Progm-4

1) Download and install JDK
2) Set "Environment variable"
	- Go to Environment variable, under "System variable" select PATH
	  and add path of jdk "C:\Program Files\Java\jdk-17"
3) Create a folder "Docker" in desktop 
4) Open VS code and run any java program
5) Now create a new file in VS code and save it as "Dockerfile". It should contain

	FROM openjdk
	WORKDIR /app
	COPY . /app
	RUN javac P1.java
	CMD ["java", "P1"]

5) Go to docker app, on bottom left run Docker
6) Run java file in VS code and in its terminal type
	docker build -t app .
	docker run --name app1 app
7) Open docker check for output



FROM python
WORKDIR /app
COPY . /app
RUN python simple.py
CMD ["python", "simple.py"]


---------------------------------------------------------------------------------------------------------------------------------


Progm-5 SQL

1) Open Docker Desktop

2) Open windows Powershell-1
	>> docker run hello-world

3) Search "hub.docker.com" 
	-Here search "mysql", copy "docker pull mysql" and paste it in Powershell-1
	-Go to docker desktop and see for "mysql" image

4) In Powershell-1 type >> docker run mysql, copy 1st one "MYSQL_ROOT_PASSWORD"

5) >> docker run -e MYSQL_ROOT_PASSWORD=admin -d mysql 
6) >> docker container ls, now copy the last name of the container

7) Now run >> docker inspect copied-container
8) In o/p you will get IP address, copy that address	


Powershell-2

1) Execute >> docker run -it mysql /bin/bash
2) bash-4.4# mysql -h 172.17.0.2 -u root -p
3) Enter password: admin

4) Now create database:
	mysql>> create database db;
	mysql>> show schemas;
	mysql>> use db;

5) Now create table and insert values
	>>  create table student(ID varchar(30), Name varchar(30), Branch varchar(30), Grade varchar(30));
	
	>> insert into student(ID, Name, Branch, Grade) values("01", "Arun", "ISE", "S");
	>> insert into student(ID, Name, Branch, Grade) values("02", "Varun", "ISE", "A");
	>> insert into student(ID, Name, Branch, Grade) values("03", "Tom", "ISE", "B");
	>> insert into student(ID, Name, Branch, Grade) values("04", "Jack", "ISE", "C");

	>> select *from student;

6) Deleting a row 
	>> delete from student where ID="02";

7) Now display after deleting
	>> select * from student;


-----------------------------------------------------------------------------------------------------------


Prgm-6 Docker hub

1) Create an image using Docker (prgm-4)
2) Login to docker hub in browser
3) Go to VS code terminal and type
	>> docker tag app ethesh21/ab:1
	>> docker image
	>> docker login
		give username and Password
	>> docker push ethesh21/ab:1
4) Go to dockerhub and search ethesh21/ab
5) we can see container




-----------------------------------------------------------------------------------------------------------


Prgm-7 Maven

1) Open Eclipse
2) Create new Maven Project
3) Click next, give Catalog: Internal and Filter: quick. Now click on link available
4) Click next, give Group id:prgm7 and Artifact name:devops. Click Finish
5) Now in browser search "mvn repository", there search "json.simple"
6) Select 1.1.1 version and copy the code
7) Paste the code in "pom.xml" file under dependencies section
8) Create a folder "JSON" under maven project
9) Inside the folder create file "demo.json" and type:
	{
    		"firstname": "Ethesh",
    		"lastname": "M"
	} 


10) Inside src/main/java create new class "pgm7" and type:


package prgm7.devoops2;

import java.io.FileReader;
import java.io.IOException;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class pgm7 {
	public static void main(String[] args) throws IOException, ParseException {
		JSONParser jsonparser = new JSONParser();
		FileReader reader =new FileReader(".\\JSON\\demo.json");

		Object obj = jsonparser.parse(reader);
		JSONObject empjsonobj = (JSONObject)obj;
		
		String fname = (String) empjsonobj.get("firstname");
		String lname = (String) empjsonobj.get("lastname");
		
		System.out.println("First name:"+fname);
		System.out.println("Last name:"+lname);
		
	}
}


11) Save and run the code to get O/P



-----------------------------------------------------------------------------------------------------------


Prgm-8 Slack

1) Download and install slack and create new workspace
2) Open jenkins, click on manage jenkins, then click plugins, in available plugins download "slack notification"
3) Go to installed plugins
	-Type slack notification and click on it
	-New page will open and click on 2nd link
	-In Post To Channel add channel name and copy Credential ID
4) Now go to manage jenkins and click on System config
	-Scoll down and give Workspace and channel name
	-Add Credential, under kind paste secrete text 
	-Description ur name
	-Click Add and Apply
5)Go to new item and select freestyle
6) Go to Build steps
	-Select windows batch command
	-type java --version
7) Go to Post build action 
	-select slack notification and select all
	-click build
8) In slack we get notification



-----------------------------------------------------------------------------------------------------------















